<?xml version="1.0" encoding="ISO-8859-1"?>

<!-- ================================================================================================= -->
<!-- schlag&rahm WebSphere Administration Toolkit for IBM WebSphere DataPower SOA appliances (Swat4DP) -->
<!-- Licensed Materials - Property of schlag&rahm -->
<!-- Copyright Â© 2010, 2013 schlag&rahm AG, Switzerland. All rights reserved. -->
<!-- Licensed Materials - Property of IBM -->
<!-- Copyright IBM Corporation 2013. All Rights Reserved. -->
<!-- US Government Users Restricted Rights - Use, duplication or disclosure -->
<!-- restricted by GSA ADP Schedule Contract with IBM Corp. -->
<!-- ================================================================================================= -->

<!-- ====================================================================== -->
<!-- Ant build file (http://ant.apache.org/) for Ant 1.8.2 or above. -->
<!-- ====================================================================== -->
<project name="swat-dp-tools.service" default="info" basedir=".">

    <dirname file="${ant.file.swat-dp-tools.service}" property="ant_service.dir" />
    <import file="${ant_service.dir}/taskdefs.xml" />

    <!-- ================================= 
          target: info 
         ================================= -->
    <target name="info">
        <echo message="Macros for services for swat-dp-tools" />
    </target>

    <!-- = = = = = = = = = = = = = = = = =
          macrodef: service-export-macro          
         = = = = = = = = = = = = = = = = = -->
    <macrodef name="service-export-macro">
        <attribute name="env" />
        <attribute name="device" />
        <attribute name="domain" />
        <attribute name="service" />
        <attribute name="object" />
        <attribute name="class" />
        <sequential>
            <echo message="Loading device properties ${swat.dp.devices}/config/@{device}.properties" />
            <property file="${swat.dp.devices}/config/@{device}.properties" />

            <!-- Export the objects from domain -->
            <if>
                <not>
                    <isset property="swat.skip.export" />
                </not>
                <then>
                    <service-export-objects-macro device="@{device}"
                                                  env="@{env}"
                                                  domain="@{domain}"
                                                  object="@{object}"
                                                  class="@{class}" />
                    <if>
                        <available file="config/export/service-export-file-list.xml" />
                        <then>
                            <export-filestore-macro device="@{device}" env="@{env}" domain="@{domain}" />

                            <export-files-macro device="@{device}" env="@{env}" domain="@{domain}" />
                        </then>
                    </if>
                </then>
                <else>
                    <echo message="! ! ! ! !" />
                    <echo message="ATTENTION: swat.skip.export is enabled - check build.properties and comment (unset) the property." />
                    <echo message="! ! ! ! !" />
                </else>
            </if>
            <!-- Split the export file -->
            <service-split-objects-macro device="@{device}"
                                         domain="@{domain}"
                                         service="@{service}"
                                         object="@{object}"
                                         class="@{class}" />

            <!-- replace values with tokens -->
            <if>
                <equals arg1="${export.tokenize.config}" arg2="true" />
                <then>
                    <tokenize-configuration-macro env="${mgr.target.env.name}"
                                                  device="${export.device.name}"
                                                  domain="${domain.name}"
                                                  service="${service.name}"
                                                  object="${export.service.object.name}"
                                                  class="${service.object.class}" />

                    <tokenize-service-config-macro src-dir="dist/tokenized/@{device}-@{domain}"
                                                   dst-dir="dist/tokenized2/@{device}-@{domain}" />

                    <fixcrlf srcdir="dist/tokenized/@{device}-@{domain}" includes="**/*.xcfg" fixlast="true" />
                    <fixcrlf srcdir="dist/tokenized2/@{device}-@{domain}" includes="**/*.xcfg" fixlast="false" />
                </then>
            </if>

            <!-- change carriage return/line feed -->
            <property name="src-dir" value="dist/export/@{device}-@{domain}/xcfg/common" />
            <fixcrlf srcdir="${src-dir}" includes="**/*.xcfg" fixlast="false" />
        </sequential>
    </macrodef>

    <!-- = = = = = = = = = = = = = = = = =
          macrodef: service-export-objects-macro          
         = = = = = = = = = = = = = = = = = -->
    <macrodef name="service-export-objects-macro">
        <attribute name="env" />
        <attribute name="device" />
        <attribute name="domain" />
        <attribute name="object" />
        <attribute name="class" />

        <sequential>
            <!-- Prepare the soma-request service-export -->
            <service-prepare-export-objects-macro domain="@{domain}"
                                                  env="@{env}"
                                                  class="@{class}"
                                                  object="@{object}"
                                                  object-list="config/export/service-export-object-list.xml" />

            <!-- Run the soma-request service-export -->
            <soma-run-single-request-on-single-device-macro device="@{device}"
                                                            soma.request="service-export"
                                                            tmp.dir="download"
                                                            check.response="true" />

            <!-- Extract the objects from the downloaded soma-response -->
            <extract-zip-file-macro soma.request="service-export" tmp.dir="download" />
        </sequential>
    </macrodef>

    <!-- = = = = = = = = = = = = = = = = =
          macrodef: service-prepare-export-objects-macro          
         = = = = = = = = = = = = = = = = = -->
    <macrodef name="service-prepare-export-objects-macro">
        <attribute name="domain" />
        <attribute name="env" />
        <attribute name="class" />
        <attribute name="object" />
        <attribute name="object-list" />
        <sequential>
            <if>
                <available file="@{object-list}" />
                <then>
                    <!-- Define content filterset -->
                    <filterset id="content.filter" onmissingfiltersfile="ignore">
                        <filtersfile file="build.properties" />
                        <filtersfile file="config/@{env}.properties" />
                        <filtersfile file="${swat.dp.infra}/build.properties" />
                        <filter token="build.time" value="${FILESTAMP}" />
                    </filterset>

                    <!-- Copy and filter the object-list -->
                    <echo message="Copying object-list filtered [@{object-list}] ..." />
                    <copy todir="dist/download" filtering="true" verbose="true" overwrite="true">
                        <fileset file="@{object-list}" />
                        <filterset refid="content.filter" />
                    </copy>

                    <!-- Step 2: Create a service export request -->
                    <echo message="Step 2: Create a service export request" />
                    <create-service-export-request-macro input="dist/download/service-export-object-list.xml"
                                                         output="dist/download/service-export.xml"
                                                         domain="@{domain}"
                                                         class="@{class}"
                                                         object="@{object}" />
                    <!-- Step 3: Verify that all tokens have been replaced in the service export file -->
                    <verify-filter-xcfg-files-macro src-file="dist/download/service-export.xml" />
                </then>
                <else>
                    <!-- Define export filterset -->
                    <filterset id="export.filter" onmissingfiltersfile="ignore">
                        <filter token="export.service.object.class" value="@{class}"/>
                        <filter token="export.service.object.name" value="@{object}"/>
                        <filter token="export.service.objects.additional" value=""/>
                    </filterset>
                    <!-- Prepare the soma-request service-export -->
                    <soma-prepare-request-macro soma.request="service-export"
                                                domain="@{domain}"
                                                content.exists="false"
                                                custom.filter="export.filter"
                                                tmp.dir="download" />
                </else>
            </if>
        </sequential>
    </macrodef>

    <!-- = = = = = = = = = = = = = = = = =
          macrodef: service-deploy-macro          
         = = = = = = = = = = = = = = = = = -->
    <macrodef name="service-deploy-macro">
        <attribute name="env" />
        <attribute name="deployment.policy" default="" />
        <attribute name="do-quiesce" default="true" />
        <attribute name="do-import" default="true" />
        <attribute name="do-checkpoint" default="false" />
        <attribute name="flushCache" default="false" />
        <attribute name="do-unquiesce" default="true" />
        <attribute name="all-devices" default="true" />
        <attribute name="primary" default="true" />
        <attribute name="do-save" default="false" />
        <attribute name="verify" default="true" />
        <attribute name="do-standby" default="false" />
        <sequential>
            <!-- Prepare local variables -->
            <property name="local.env" value="@{env}" />
            <property name="local.dir" value="${zip-dir}" />
            <property name="local.device.set" value="${swat.device-set.name}" />
            <property name="local.domain" value="${domain.name}" />
            <property name="local.service" value="${service.name}" />
            <property name="local.file" value="${local.service}-${local.env}.zip" />

            <echoproperties prefix="local" />

            <!-- Clear the upload directories -->
            <delete dir="dist/upload" />
            <mkdir dir="dist/upload" />

            <!-- prepare soma-request status-get standby -->
            <if>
                <or>
                    <equals arg1="@{do-standby}" arg2="true" />
                    <equals arg1="${swat.settings.deploy.do-standby}" arg2="true" />
                </or>
                <then>
                    <soma-prepare-request-macro soma.request="standby-status"
                                                env="${local.env}"
                                                domain="${local.domain}"
                                                content.exists="false" />
                    <var name="standby.req.list" value="standby-status" />
                </then>
                <else>
                    <var name="standby.req.list" value="" />
                </else>
            </if>

            <!-- prepare soma-request checkpoint-save -->
            <filterset id="checkpoint.filter.id">
                <filter token="checkpoint.name" value="${local.service}" />
            </filterset>
            <if>
                <or>
                    <equals arg1="@{do-checkpoint}" arg2="true" />
                    <equals arg1="${swat.settings.deploy.do-checkpoint}" arg2="true" />
                    <equals arg1="${swat.env.type}" arg2="productive" />
                </or>
                <then>
                    <soma-prepare-request-macro soma.request="checkpoint-list"
                                                env="${local.env}"
                                                domain="${local.domain}"
                                                content.exists="false"
                                                custom.filter="checkpoint.filter.id" />
                    <soma-prepare-request-macro soma.request="checkpoint-remove"
                                                env="${local.env}"
                                                domain="${local.domain}"
                                                content.exists="false"
                                                custom.filter="checkpoint.filter.id" />
                    <soma-prepare-request-macro soma.request="checkpoint-save"
                                                env="${local.env}"
                                                domain="${local.domain}"
                                                content.exists="false"
                                                custom.filter="checkpoint.filter.id" />
                    <var name="checkpoint.req.list" value="checkpoint-remove,checkpoint-list,checkpoint-save" />
                </then>
                <else>
                    <var name="checkpoint.req.list" value="" />
                </else>
            </if>

            <!-- prepare soma-request service-import -->
            <if>
                <equals arg1="@{do-import}" arg2="true" />
                <then>
                    <soma-prepare-request-macro soma.request="service-import"
                                                env="${local.env}"
                                                domain="${local.domain}"
                                                content.exists="true"
                                                content.dir="${local.dir}"
                                                content.file="${local.file}"
                                                deployment.policy="@{deployment.policy}" />
                    <var name="import.req.list" value="service-import" />
                </then>
                <else>
                    <var name="import.req.list" value="" />
                </else>
            </if>

            <!-- prepare soma-request flush-caches -->
            <if>
                <or>
                    <istrue value="@{flushCache}" />
                    <istrue value="${deploy.flushcache}" />
                </or>
                <then>
                    <soma-prepare-request-macro soma.request="flush-stylesheet-cache"
                                                env="${local.env}"
                                                domain="${local.domain}"
                                                content.exists="false" />
                    <soma-prepare-request-macro soma.request="flush-document-cache"
                                                env="${local.env}"
                                                domain="${local.domain}"
                                                content.exists="false" />
                    <var name="flush.req.list" value="flush-stylesheet-cache,flush-document-cache" />
                </then>
                <else>
                    <var name="flush.req.list" value="" />
                </else>
            </if>

            <!-- prepare soma-request service-quiesce/unquiesce -->
            <if>
                <or>
                    <equals arg1="${service.object.name}" arg2="n/a" />
                    <equals arg1="${service.object.name}" arg2="" />
                    <equals arg1="${service.object.class}" arg2="n/a" />
                    <equals arg1="${service.object.class}" arg2="" />
                </or>
                <then>
                    <var name="quiesce.req.list" value="" />
                    <var name="unquiesce.req.list" value="" />
                </then>
                <else>
                    <if>
                        <equals arg1="@{do-quiesce}" arg2="true" />
                        <then>
                            <soma-prepare-request-macro soma.request="service-quiesce"
                                                        env="${local.env}"
                                                        domain="${local.domain}"
                                                        content.exists="false" />
                            <var name="quiesce.req.list" value="service-quiesce" />
                        </then>
                        <else>
                            <var name="quiesce.req.list" value="" />
                        </else>
                    </if>
                    <if>
                        <equals arg1="@{do-unquiesce}" arg2="true" />
                        <then>
                            <soma-prepare-request-macro soma.request="service-unquiesce"
                                                        env="${local.env}"
                                                        domain="${local.domain}"
                                                        content.exists="false" />
                            <var name="unquiesce.req.list" value="service-unquiesce" />
                        </then>
                        <else>
                            <var name="unquiesce.req.list" value="" />
                        </else>
                    </if>
                </else>
            </if>

            <!-- prepare soma-request status-get -->
            <filterset id="verify.filter.id">
                <filter token="status.provider" value="ObjectStatus" />
            </filterset>
            <if>
                <equals arg1="@{verify}" arg2="true" />
                <then>
                    <soma-prepare-request-macro soma.request="status-get"
                                                env="${local.env}"
                                                domain="${local.domain}"
                                                content.exists="false"
                                                custom.filter="verify.filter.id" />

                    <var name="verify.req.list" value="status-get" />
                </then>
                <else>
                    <var name="verify.req.list" value="" />
                </else>
            </if>

            <!-- prepare soma-request save-config -->
            <if>
                <equals arg1="@{do-save}" arg2="true" />
                <then>
                    <soma-prepare-request-macro soma.request="config-save"
                                                env="${local.env}"
                                                domain="${local.domain}"
                                                content.exists="false" />
                    <var name="save.req.list" value="config-save" />
                </then>
                <else>
                    <var name="save.req.list" value="" />
                </else>
            </if>
            <!-- prepare soma-request list -->
            <join-vars-macro result="inter0" arg1="${standby.req.list}" arg2="${checkpoint.req.list}" />
            <join-vars-macro result="inter1" arg1="${inter0}" arg2="${quiesce.req.list}" />
            <join-vars-macro result="inter2" arg1="${inter1}" arg2="${import.req.list}" />
            <join-vars-macro result="inter3" arg1="${inter2}" arg2="${flush.req.list}" />
            <join-vars-macro result="inter4" arg1="${inter3}" arg2="${unquiesce.req.list}" />
            <join-vars-macro result="inter5" arg1="${inter4}" arg2="sleep" />
            <join-vars-macro result="inter6" arg1="${inter5}" arg2="${verify.req.list}" />
            <join-vars-macro result="soma.request.list" arg1="${inter6}" arg2="${save.req.list}" />
            <echo message="Joined the list of requests to be [${soma.request.list}]." />
            <fail message="No requests in the list to be run, stop process.">
                <condition>
                    <equals arg1="${soma.request.list}" arg2="" />
                </condition>
            </fail>

            <!-- run soma-request list on both devices (default) or on primary or on secondaries -->
            <if>
                <equals arg1="@{all-devices}" arg2="true" />
                <then>
                    <soma-run-multi-requests-on-multi-devices-macro device.set="${local.device.set}"
                                                                    soma.requests="${soma.request.list}"
                                                                    check.response="true" />
                </then>
                <else>
                    <!-- Load the device-set properties to determine the devices -->
                    <load-device-set-props-macro device-set="${local.device.set}" />
                    <if>
                        <equals arg1="@{primary}" arg2="true" />
                        <then>
                            <soma-run-multi-requests-on-single-device-macro device="${swat.device.master}"
                                                                            soma.requests="${soma.request.list}"
                                                                            check.response="true"
                                                                            tmp.dir="upload" />
                        </then>
                        <else>
                            <!-- Run multi-requests on all secondary devices -->
                            <property name="current.soma.request.list" value="${soma.request.list}" />
                            <property name="current.check.response" value="true" />
                            <property name="current.tmp.dir" value="upload" />
                            <foreach target="service-deploy-on-secondary-devices"
                                     list="${swat.device.list}"
                                     delimiter=","
                                     param="current.device"
                                     inheritall="true"
                                     inheritrefs="true" />
                        </else>
                    </if>
                </else>
            </if>
        </sequential>
    </macrodef>

    <!-- = = = = = = = = = = = = = = = = =
          macrodef: artifact-deploy-macro          
         = = = = = = = = = = = = = = = = = -->
    <macrodef name="artifact-deploy-macro">
        <attribute name="env" />
        <attribute name="sourcedir" />
        <attribute name="artifact" />
        <attribute name="version" />
        <attribute name="deployment.policy" default="" />
        <attribute name="do-quiesce" default="true" />
        <attribute name="do-import" default="true" />
        <attribute name="do-checkpoint" default="false" />
        <attribute name="flushCache" default="false" />
        <attribute name="do-unquiesce" default="true" />
        <attribute name="all-devices" default="true" />
        <attribute name="primary" default="true" />
        <attribute name="do-save" default="false" />
        <attribute name="do-standby" default="false" />
        <attribute name="verify" default="true" />
        <sequential>
            <!-- Prepare local variables -->
            <property name="local.env" value="@{env}" />
            <property name="local.dir" value="@{sourcedir}" />
            <property name="local.version" value="@{version}" />
            <property name="local.file" value="@{artifact}-@{version}-${local.env}.zip" />
            <propertyregex property="local.zone"
                           input="@{artifact}"
                           regexp="[^\s\\/]-swat-dp-services-([a-z]+)-([a-z]+)-([a-z-]+)"
                           select="\1" />
            <propertyregex property="local.domain.short"
                           input="@{artifact}"
                           regexp="[^\s\\/]-swat-dp-services-([a-z]+)-([a-z]+)-([a-z-]+)"
                           select="\2" />
            <propertyregex property="local.service"
                           input="@{artifact}"
                           regexp="[^\s\\/]-swat-dp-services-([a-z]+)-([a-z]+)-([a-z-]+)"
                           select="\3" />
            <!-- FIXME: the regex should either take the environment labels from the actual infra config or it should be generic -->
            <propertyregex property="artifact.env"
                           input="@{artifact}"
                           regexp="[^\s\\/]*-([test|qtst|prod])\.zip"
                           select="\1" />

            <!-- load important properties that would be in the project's build.properties from the Maven POM artifact -->
            <echo message="Loading service POM: ${local.dir}/@{artifact}-@{version}.pom" />
            <xmlproperty file="${local.dir}/@{artifact}-@{version}.pom" keepRoot="false" />
            <property name="service.object.name" value="${properties.swat.service.object.name}" />
            <property name="service.object.class" value="${properties.swat.service.object.class}" />
            <fail message="The property 'service.object.name' is not defined! Check the @{artifact} POM.">
                <condition>
                    <contains string="${service.object.name}" substring="{" />
                </condition>
            </fail>
            <fail message="The property 'service.object.class' is not defined! Check the @{artifact} POM.">
                <condition>
                    <contains string="${service.object.class}" substring="{" />
                </condition>
            </fail>

            <load-env-props-macro zone="${local.zone}" env="${local.env}" />
            <load-domain-props-macro zone="${local.zone}" env="${local.env}" domain="${local.domain.short}" />
            <property name="local.device.set" value="${swat.device-set.name}" />
            <property name="local.domain" value="${swat.domain.name}" />

            <echoproperties prefix="local" />
            <echoproperties prefix="service" />
            <echoproperties prefix="swat" />

            <!-- prepare soma-request status-get standby -->
            <if>
                <or>
                    <equals arg1="@{do-standby}" arg2="true" />
                    <equals arg1="${swat.settings.deploy.do-standby}" arg2="true" />
                </or>
                <then>
                    <soma-prepare-request-macro soma.request="standby-status"
                                                env="${local.env}"
                                                domain="${local.domain}"
                                                content.exists="false" />
                    <var name="standby.req.list" value="standby-status" />
                </then>
                <else>
                    <var name="standby.req.list" value="" />
                </else>
            </if>

            <!-- prepare soma-request checkpoint-save -->
            <filterset id="checkpoint.filter.id">
                <filter token="checkpoint.name" value="${local.service}" />
            </filterset>
            <if>
                <or>
                    <equals arg1="@{do-checkpoint}" arg2="true" />
                    <equals arg1="${swat.env.type}" arg2="productive" />
                </or>
                <then>
                    <soma-prepare-request-macro soma.request="checkpoint-list"
                                                env="${local.env}"
                                                domain="$
                                                        {local.domain}"
                                                content.exists="false"
                                                custom.filter="checkpoint.filter.id" />
                    <soma-prepare-request-macro soma.request="checkpoint-remove"
                                                env="${local.env}"
                                                domain="${local.domain}"
                                                content.exists="false"
                                                custom.filter="checkpoint.filter.id" />
                    <soma-prepare-request-macro soma.request="checkpoint-save"
                                                env="${local.env}"
                                                domain="${local.domain}"
                                                content.exists="false"
                                                custom.filter="checkpoint.filter.id" />
                    <var name="checkpoint.req.list" value="checkpoint-remove,checkpoint-list,checkpoint-save" />
                </then>
                <else>
                    <var name="checkpoint.req.list" value="" />
                </else>
            </if>

            <!-- prepare soma-request service-import -->
            <if>
                <equals arg1="@{do-import}" arg2="true" />
                <then>
                    <soma-prepare-request-macro soma.request="service-import"
                                                env="${local.env}"
                                                domain="${local.domain}"
                                                content.exists="true"
                                                content.dir="${local.dir}"
                                                content.file="${local.file}"
                                                deployment.policy="@{deployment.policy}" />
                    <var name="import.req.list" value="service-import" />
                </then>
                <else>
                    <var name="import.req.list" value="" />
                </else>
            </if>
            <!-- prepare soma-request flush-caches -->
            <if>
                <or>
                    <istrue value="@{flushCache}" />
                    <istrue value="${deploy.flushcache}" />
                </or>
                <then>
                    <soma-prepare-request-macro soma.request="flush-stylesheet-cache"
                                                env="${local.env}"
                                                domain="${local.domain}"
                                                content.exists="false" />
                    <soma-prepare-request-macro soma.request="flush-document-cache"
                                                env="${local.env}"
                                                domain="${local.domain}"
                                                content.exists="false" />
                    <var name="flush.req.list" value="flush-stylesheet-cache,flush-document-cache" />
                </then>
                <else>
                    <var name="flush.req.list" value="" />
                </else>
            </if>
            <!-- prepare soma-request service-quiesce/unquiesce -->
            <filterset id="service.filter.id">
                <propertyset>
                    <propertyref name="service.object.name" />
                    <propertyref name="service.object.class" />
                </propertyset>
            </filterset>
            <if>
                <or>
                    <equals arg1="${service.object.name}" arg2="n/a" />
                    <equals arg1="${service.object.class}" arg2="n/a" />
                </or>
                <then>
                    <echo message="Non-service deployment --> disabling quiesce/unquiesce." />
                    <var name="quiesce.req.list" value="" />
                    <var name="unquiesce.req.list" value="" />
                </then>
                <elseif>
                    <or>
                        <equals arg1="${service.object.name}" arg2="" />
                        <equals arg1="${service.object.class}" arg2="" />
                    </or>
                    <then>
                        <echo message="ATTENTION: Service object name and/or class has not been provided --> disabling quiesce/unquiesce!" />
                        <var name="quiesce.req.list" value="" />
                        <var name="unquiesce.req.list" value="" />
                    </then>
                </elseif>
                <else>
                    <if>
                        <equals arg1="@{do-quiesce}" arg2="true" />
                        <then>
                            <soma-prepare-request-macro soma.request="service-quiesce"
                                                        custom.filter="service.filter.id"
                                                        env="${local.env}"
                                                        domain="${local.domain}"
                                                        content.exists="false" />
                            <var name="quiesce.req.list" value="service-quiesce" />
                        </then>
                        <else>
                            <var name="quiesce.req.list" value="" />
                        </else>
                    </if>
                    <if>
                        <equals arg1="@{do-unquiesce}" arg2="true" />
                        <then>
                            <soma-prepare-request-macro soma.request="service-unquiesce"
                                                        custom.filter="service.filter.id"
                                                        env="${local.env}"
                                                        domain="${local.domain}"
                                                        content.exists="false" />
                            <var name="unquiesce.req.list" value="service-unquiesce" />
                        </then>
                        <else>
                            <var name="unquiesce.req.list" value="" />
                        </else>
                    </if>
                </else>
            </if>

            <!-- prepare soma-request status-get -->
            <filterset id="verify.filter.id">
                <filter token="status.provider" value="ObjectStatus" />
            </filterset>
            <if>
                <equals arg1="@{verify}" arg2="true" />
                <then>
                    <soma-prepare-request-macro soma.request="status-get"
                                                env="${local.env}"
                                                domain="${local.domain}"
                                                content.exists="false"
                                                custom.filter="verify.filter.id" />

                    <var name="verify.req.list" value="status-get" />
                </then>
                <else>
                    <var name="verify.req.list" value="" />
                </else>
            </if>

            <!-- prepare soma-request save-config -->
            <if>
                <equals arg1="@{do-save}" arg2="true" />
                <then>
                    <soma-prepare-request-macro soma.request="config-save"
                                                env="${local.env}"
                                                domain="${local.domain}"
                                                content.exists="false" />
                    <var name="save.req.list" value="config-save" />
                </then>
                <else>
                    <var name="save.req.list" value="" />
                </else>
            </if>
            <!-- prepare soma-request list -->
            <join-vars-macro result="inter0" arg1="${standby.req.list}" arg2="${checkpoint.req.list}" />
            <join-vars-macro result="inter1" arg1="${inter0}" arg2="${quiesce.req.list}" />
            <join-vars-macro result="inter2" arg1="${inter1}" arg2="${import.req.list}" />
            <join-vars-macro result="inter3" arg1="${inter2}" arg2="${flush.req.list}" />
            <join-vars-macro result="inter4" arg1="${inter3}" arg2="${unquiesce.req.list}" />
            <join-vars-macro result="inter5" arg1="${inter4}" arg2="sleep" />
            <join-vars-macro result="inter6" arg1="${inter5}" arg2="${verify.req.list}" />
            <join-vars-macro result="soma.request.list" arg1="${inter6}" arg2="${save.req.list}" />
            <echo message="Joined the list of requests to be [${soma.request.list}]." />
            <fail message="No requests in the list to be run, stop process.">
                <condition>
                    <equals arg1="${soma.request.list}" arg2="" />
                </condition>
            </fail>
            <!-- run soma-request list on both devices (default) or on primary or on secondaries -->
            <if>
                <equals arg1="@{all-devices}" arg2="true" />
                <then>
                    <soma-run-multi-requests-on-multi-devices-macro device.set="${local.device.set}"
                                                                    soma.requests="${soma.request.list}"
                                                                    check.response="true" />
                </then>
                <else>
                    <!-- Load the device-set properties to determine the devices -->
                    <load-device-set-props-macro device-set="${local.device.set}" />
                    <if>
                        <equals arg1="@{primary}" arg2="true" />
                        <then>
                            <soma-run-multi-requests-on-single-device-macro device="${swat.device.master}"
                                                                            soma.requests="${soma.request.list}"
                                                                            check.response="true"
                                                                            tmp.dir="upload" />
                        </then>
                        <else>
                            <!-- Run multi-requests on all secondary devices -->
                            <property name="current.soma.request.list" value="${soma.request.list}" />
                            <property name="current.check.response" value="true" />
                            <property name="current.tmp.dir" value="upload" />
                            <foreach target="service-deploy-on-secondary-devices"
                                     list="${swat.device.list}"
                                     delimiter=","
                                     param="current.device"
                                     inheritall="true"
                                     inheritrefs="true" />
                        </else>
                    </if>
                </else>
            </if>
        </sequential>
    </macrodef>

    <!-- ================================= 
          target: service-deploy-on-secondary-devices              
         ================================= -->
    <target name="service-deploy-on-secondary-devices">
        <echo message="Device is ${current.device}, the master device is ${swat.device.master} in env ${swat.env.name}." />
        <if>
            <not>
                <equals arg1="${current.device}" arg2="${swat.device.master}" />
            </not>
            <then>
                <soma-run-multi-requests-on-single-device-macro device="${current.device}"
                                                                soma.requests="${current.soma.request.list}"
                                                                check.response="${current.check.response}"
                                                                tmp.dir="${current.tmp.dir}" />
            </then>
        </if>
    </target>

    <!-- = = = = = = = = = = = = = = = = =
          macrodef: service-create-project-prefix-macro          
         = = = = = = = = = = = = = = = = = -->
    <macrodef name="service-create-project-prefix-macro">
        <attribute name="zone" />
        <attribute name="domain" />
        <sequential>
            <!-- set project name according to the general swat settings defined by the swat-dp-infra project -->
            <fail message="One of swat.settings.project.services.prefix or swat.settings.project.services.prefix.pattern has to be defined in ${swat.customer}-swat-dp-infra/ build.proerties">
                <condition>
                    <and>
                        <not>
                            <isset property="swat.settings.project.services.prefix.pattern" />
                        </not>
                        <not>
                            <isset property="swat.settings.project.services.prefix" />
                        </not>
                    </and>
                </condition>
            </fail>
            <if>
                <isset property="swat.settings.project.services.prefix.pattern" />
                <then>
                    <echo message="using pattern: ${swat.settings.project.services.prefix.pattern}" />
                    <property name="pzone" value="@{zone}" />
                    <propertyregex property="service.project.prefix"
                                   input="${swat.settings.project.services.prefix.pattern}"
                                   regexp="(.*)@zone@(.*)"
                                   replace="\1@{zone}\2"
                                   casesensitive="false" />
                    <propertyregex property="service.project.prefix"
                                   input="${service.project.prefix}"
                                   regexp="(.*)@domain@(.*)"
                                   replace="\1@{domain}\2"
                                   casesensitive="false"
                                   override="true"
                                   defaultvalue="${service.project.prefix}" />
                </then>
                <elseif>
                    <and>
                        <istrue value="${swat.settings.infra.domain-as-env}" />
                        <istrue value="${swat.settings.infra.projectname-without-zone}" />
                    </and>
                    <then>
                        <property name="service.project.prefix" value="${swat.settings.project.services.prefix}" />
                    </then>
                </elseif>
                <elseif>
                    <and>
                        <istrue value="${swat.settings.infra.domain-as-env}" />
                        <isfalse value="${swat.settings.infra.projectname-without-zone}" />
                    </and>
                    <then>
                        <property name="service.project.prefix"
                                  value="${swat.settings.project.services.prefix}-@{zone}" />
                    </then>
                </elseif>
                <elseif>
                    <and>
                        <isfalse value="${swat.settings.infra.domain-as-env}" />
                        <istrue value="${swat.settings.infra.projectname-without-zone}" />
                    </and>
                    <then>
                        <property name="service.project.prefix"
                                  value="${swat.settings.project.services.prefix}-@{domain}" />
                    </then>
                </elseif>
                <else>
                    <property name="service.project.prefix"
                              value="${swat.settings.project.services.prefix}-@{zone}-@{domain}" />
                </else>
            </if>
            <if>
                <isset property="swat.domain.mvn.aggregator" />
                <then>
                    <echo message="Maven multi-module setup has been configured: ${swat.domain.mvn.aggregator}" />
                    <propertyregex property="service.mvn.aggregator"
                                   input="${swat.domain.mvn.aggregator}"
                                   regexp="(.*)@zone@(.*)"
                                   replace="\1@{zone}\2"
                                   casesensitive="false"
                                   defaultvalue="${swat.domain.mvn.aggregator}" />
                    <propertyregex property="service.mvn.aggregator"
                                   input="${service.mvn.aggregator}"
                                   regexp="(.*)@domain@(.*)"
                                   replace="\1@{domain}\2"
                                   casesensitive="false"
                                   override="true"
                                   defaultvalue="${service.mvn.aggregator}" />
                </then>
            </if>
        </sequential>
    </macrodef>

    <!-- = = = = = = = = = = = = = = = = =
          macrodef: service-quiesce-macro          
         = = = = = = = = = = = = = = = = = -->
    <macrodef name="service-quiesce-macro">
        <attribute name="env" />
        <attribute name="do-quiesce" default="true" />
        <attribute name="all-devices" default="true" />
        <attribute name="primary" default="true" />
        <sequential>
            <!-- Prepare local variables -->
            <property name="local.env" value="@{env}" />
            <property name="local.device.set" value="${swat.device-set.name}" />
            <property name="local.domain" value="${domain.name}" />
            <property name="local.service" value="${service.name}" />

            <!-- Clear the upload directories -->
            <delete dir="dist/upload" />
            <mkdir dir="dist/upload" />

            <!-- prepare soma-request service-quiesce/unquiesce -->
            <if>
                <equals arg1="${service.object.name}" arg2="n/a" />
                <then>
                    <var name="soma.request.list" value="" />
                </then>
                <elseif>
                    <equals arg1="@{do-quiesce}" arg2="true" />
                    <then>
                        <soma-prepare-request-macro soma.request="service-quiesce"
                                                    env="${local.env}"
                                                    domain="${local.domain}"
                                                    content.exists="false" />
                        <var name="soma.request.list" value="service-quiesce" />
                    </then>
                </elseif>
                <else>
                    <soma-prepare-request-macro soma.request="service-unquiesce"
                                                env="${local.env}"
                                                domain="${local.domain}"
                                                content.exists="false" />
                    <var name="soma.request.list" value="service-unquiesce" />
                </else>
            </if>

            <fail message="No requests in the list to be run, stop process.">
                <condition>
                    <or>
                        <equals arg1="${soma.request.list}" arg2="" />
                        <not>
                            <isset property="soma.request.list" />
                        </not>
                    </or>
                </condition>
            </fail>

            <!-- run soma-request list on both devices (default) or on primary or on secondaries -->
            <if>
                <equals arg1="@{all-devices}" arg2="true" />
                <then>
                    <soma-run-multi-requests-on-multi-devices-macro device.set="${local.device.set}"
                                                                    soma.requests="${soma.request.list}"
                                                                    check.response="true" />
                </then>
                <else>
                    <!-- Load the device-set properties to determine the devices -->
                    <load-device-set-props-macro device-set="${local.device.set}" />
                    <if>
                        <equals arg1="@{primary}" arg2="true" />
                        <then>
                            <soma-run-multi-requests-on-single-device-macro device="${swat.device.master}"
                                                                            soma.requests="${soma.request.list}"
                                                                            check.response="true"
                                                                            tmp.dir="upload" />
                        </then>
                        <else>
                            <!-- Run multi-requests on all secondary devices -->
                            <property name="current.soma.request.list" value="${soma.request.list}" />
                            <property name="current.check.response" value="true" />
                            <property name="current.tmp.dir" value="upload" />
                            <foreach target="service-deploy-on-secondary-devices"
                                     list="${swat.device.list}"
                                     delimiter=","
                                     param="current.device"
                                     inheritall="true"
                                     inheritrefs="true" />
                        </else>
                    </if>
                </else>
            </if>
        </sequential>
    </macrodef>
</project>
